openapi: 3.0.3
info:
  title: UBeU Identity API
  version: 1.0.0
  description: |
    UBeU Identity Management API for decentralized identity operations.

    ## Authentication
    All API requests require authentication using JWT tokens:

    ```
    Authorization: Bearer <your-jwt-token>
    ```

    ## Rate Limiting
    - Individual users: 1000 requests/hour
    - Pro tier: 5000 requests/hour
    - Enterprise tier: 25000 requests/hour

  contact:
    name: UBeU Support
    email: support@ubeu.io
    url: https://ubeu.io/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.ubeu.io/v1
    description: Production server
  - url: https://staging-api.ubeu.io/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Local development server

security:
  - bearerAuth: []

paths:
  /identities/register:
    post:
      summary: Register new identity
      description: Create a new decentralized identity with optional domain alias
      tags:
        - Identity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: user@example.com
                domainAlias:
                  type: string
                  description: .iam domain alias (e.g., john.smith.iam)
                  example: john.smith.iam
                  pattern: '^[a-zA-Z0-9-]+\.iam$'
                externalDomain:
                  type: string
                  description: External Web3 domain (e.g., john.eth)
                  example: john.eth
                subscriptionTier:
                  type: string
                  enum: [individual, pro, enterprise]
                  default: individual
                  description: Subscription tier for the user
      responses:
        "201":
          description: Identity created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        format: uuid
                        example: 123e4567-e89b-12d3-a456-426614174000
                      did:
                        type: string
                        description: Decentralized Identifier
                        example: did:hedera:mainnet:0.0.12345
                      hederaAccount:
                        type: string
                        description: Hedera account ID
                        example: "0.0.12345"
                      topicId:
                        type: string
                        description: HCS topic ID
                        example: "0.0.67890"
                      ubAuthToken:
                        type: string
                        description: UBAuth token ID
                        example: "0.0.11111"
                      subscription:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          tier:
                            type: string
                            enum: [individual, pro, enterprise]
                          status:
                            type: string
                            enum: [active, pending_setup, suspended]
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Email or domain already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /identities/{userId}:
    get:
      summary: Get identity information
      description: Retrieve detailed information about a user's identity
      tags:
        - Identity
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        "200":
          description: Identity information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        format: uuid
                      did:
                        type: string
                        description: Decentralized Identifier
                      domains:
                        type: array
                        items:
                          type: object
                          properties:
                            domain:
                              type: string
                              example: john.smith.iam
                            type:
                              type: string
                              enum: [iam, external]
                            status:
                              type: string
                              enum: [active, pending, suspended]
                            expiresAt:
                              type: string
                              format: date-time
                      credentials:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: urn:uuid:cred-12345
                            type:
                              type: string
                              example: DomainOwnership
                            issuer:
                              type: string
                              example: did:hedera:mainnet:0.0.issuer
                            issuedAt:
                              type: string
                              format: date-time
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update identity
      description: Update user identity information
      tags:
        - Identity
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: New email address
                domainAlias:
                  type: string
                  description: New .iam domain alias
                  pattern: '^[a-zA-Z0-9-]+\.iam$'
      responses:
        "200":
          description: Identity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        format: uuid
                      updatedFields:
                        type: array
                        items:
                          type: string
                        example: ["email", "domainAlias"]
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /identities/did/{did}:
    get:
      summary: Resolve DID
      description: Resolve a DID to its DID document
      tags:
        - Identity
      parameters:
        - name: did
          in: path
          required: true
          schema:
            type: string
            pattern: '^did:hedera:(mainnet|testnet):0\.0\.\d+$'
          description: Decentralized Identifier
          example: did:hedera:mainnet:0.0.12345
      responses:
        "200":
          description: DID document retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      "@context":
                        type: array
                        items:
                          type: string
                        example: ["https://www.w3.org/ns/did/v1"]
                      id:
                        type: string
                        example: did:hedera:mainnet:0.0.12345
                      controller:
                        type: string
                        example: did:hedera:mainnet:0.0.12345
                      verificationMethod:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: did:hedera:mainnet:0.0.12345#key-1
                            type:
                              type: string
                              example: Ed25519VerificationKey2020
                            controller:
                              type: string
                              example: did:hedera:mainnet:0.0.12345
                            publicKeyMultibase:
                              type: string
                              example: z...
                      service:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: did:hedera:mainnet:0.0.12345#domain
                            type:
                              type: string
                              example: DomainLinkage
                            serviceEndpoint:
                              type: string
                              example: john.smith.iam
        "404":
          description: DID not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /identities/search:
    get:
      summary: Search identities
      description: Search for identities by various criteria
      tags:
        - Identity
      parameters:
        - name: email
          in: query
          schema:
            type: string
            format: email
          description: Search by email address
        - name: domain
          in: query
          schema:
            type: string
          description: Search by domain name
        - name: did
          in: query
          schema:
            type: string
            pattern: '^did:hedera:(mainnet|testnet):0\.0\.\d+$'
          description: Search by DID
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Maximum number of results
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of results to skip
      responses:
        "200":
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          format: uuid
                        did:
                          type: string
                        email:
                          type: string
                          format: email
                        domain:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 150
                      limit:
                        type: integer
                        example: 20
                      offset:
                        type: integer
                        example: 0
                      hasMore:
                        type: boolean
                        example: true
        "400":
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /identities/{userId}/dids:
    get:
      summary: Get user's DIDs
      description: Retrieve all DIDs associated with a user
      tags:
        - Identity
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        "200":
          description: User's DIDs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        did:
                          type: string
                          example: did:hedera:mainnet:0.0.12345
                        type:
                          type: string
                          enum: [personal, professional, organizational]
                          example: personal
                        status:
                          type: string
                          enum: [active, suspended, deactivated]
                          example: active
                        createdAt:
                          type: string
                          format: date-time
                        lastUsed:
                          type: string
                          format: date-time
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create new DID
      description: Create a new DID for the user within their existing topic
      tags:
        - Identity
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                type:
                  type: string
                  enum: [personal, professional, organizational]
                  description: Type of DID to create
                label:
                  type: string
                  description: Human-readable label for the DID
                  example: "Work DID"
      responses:
        "201":
          description: DID created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      did:
                        type: string
                        example: did:hedera:mainnet:0.0.12346
                      type:
                        type: string
                        example: professional
                      topicId:
                        type: string
                        example: "0.0.67890"
                      transactionId:
                        type: string
                        example: "0.0.12345@1234567890.000000000"
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "402":
          description: Insufficient allowance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid request data
        details:
          type: object
          description: Additional error details
        requestId:
          type: string
          format: uuid
          description: Request ID for tracking
      required:
        - success
        - error
        - message

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User's email address
        did:
          type: string
          description: Primary DID
          pattern: '^did:hedera:(mainnet|testnet):0\.0\.\d+$'
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        status:
          type: string
          enum: [active, suspended, deactivated]
          description: Account status
      required:
        - id
        - email
        - createdAt

    DID:
      type: object
      properties:
        id:
          type: string
          description: DID string
          pattern: '^did:hedera:(mainnet|testnet):0\.0\.\d+$'
        controller:
          type: string
          description: DID controller
        verificationMethod:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              type:
                type: string
              controller:
                type: string
              publicKeyMultibase:
                type: string
        service:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              type:
                type: string
              serviceEndpoint:
                type: string
      required:
        - id

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from authentication endpoint

  parameters:
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Unique user identifier
      example: 123e4567-e89b-12d3-a456-426614174000

    did:
      name: did
      in: path
      required: true
      schema:
        type: string
        pattern: '^did:hedera:(mainnet|testnet):0\.0\.\d+$'
      description: Decentralized Identifier
      example: did:hedera:mainnet:0.0.12345

tags:
  - name: Identity
    description: Identity management operations
  - name: DID
    description: Decentralized Identifier operations
  - name: Domain
    description: Domain management operations
